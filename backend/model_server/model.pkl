import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
import pickle  # For model and encoder loading

# Load the saved model and encoders (ensure these are saved after training)
try:
    # Load pre-trained model and encoders
    model = pickle.load(open("model.pkl", "rb"))
    time_of_day_encoder = pickle.load(open("time_of_day_encoder.pkl", "rb"))
    season_encoder = pickle.load(open("season_encoder.pkl", "rb"))
except FileNotFoundError as e:
    print("Error: Model or encoder file not found.")
    raise e


# Example function to calculate dynamic discount
def calculate_dynamic_discount(
    original_price, booking_count, day_of_week, time_of_day, season
):
    try:
        # Check if time_of_day and season are valid inputs
        if time_of_day not in time_of_day_encoder.classes_:
            raise ValueError(f"Invalid 'time_of_day' value: {time_of_day}")
        if season not in season_encoder.classes_:
            raise ValueError(f"Invalid 'season' value: {season}")

        # Encode 'time_of_day' and 'season' to numerical values
        time_of_day_encoded = time_of_day_encoder.transform([time_of_day])[0]
        season_encoded = season_encoder.transform([season])[0]

        # Prepare input data for prediction
        new_data = pd.DataFrame(
            {
                "booking_count": [booking_count],
                "day_of_week": [day_of_week],
                "time_of_day": [time_of_day_encoded],
                "season": [season_encoded],
                "original_price": [original_price],
            }
        )

        # Predict the discount using the model
        predicted_discount = model.predict(new_data)[0]

        # Ensure the discount is within a valid range (0% - 100%)
        predicted_discount = max(0, min(predicted_discount, 100))

        # Calculate the final price after applying the discount
        final_price = original_price * (1 - predicted_discount / 100)

        return predicted_discount, final_price

    except Exception as e:
        print(f"Error during dynamic discount calculation: {e}")
        return None, None


# Example usage:
original_price = 100  # example price
booking_count = 5  # example booking count
day_of_week = 3  # example day (e.g., Wednesday)
time_of_day = "afternoon"  # example time of day
season = "summer"  # example season

discount, final_price = calculate_dynamic_discount(
    original_price, booking_count, day_of_week, time_of_day, season
)

if discount is not None:
    print(f"Discount: {discount}%")
    print(f"Final Price: {final_price}")
else:
    print("Failed to calculate discount.")
